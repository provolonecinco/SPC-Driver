# ld65 linker config for 256 KiB (2 Mbit) sfc file

# Physical areas of memory
MEMORY {
    ZP:         start =  $000000, size = $0100;
    STACK:      start =  $000100, size = $0100;
    LORAM:      start =  $000200, size = $1E00;
    HIRAM:      start =  $7E2000, size = $E000;     
    EXRAM:      start =  $7F0000, size = $10000;

    # The fast ROM area starts at $808000.
    # It's mirrored into the slow ROM area.
    ROM0:       start =  $808000, size = $8000, fill = yes, type = ro;
    ROM1:       start =  $818000, size = $8000, fill = yes, type = ro;
    ROM2:       start =  $828000, size = $8000, fill = yes, type = ro;
    ROM3:       start =  $838000, size = $8000, fill = yes, type = ro;
    ROM4:       start =  $848000, size = $8000, fill = yes, type = ro;
    ROM5:       start =  $858000, size = $8000, fill = yes, type = ro;
    ROM6:       start =  $868000, size = $8000, fill = yes, type = ro;
    ROM7:       start =  $878000, size = $8000, fill = yes, type = ro;

    SPCZP:      start = $0000, size = $00F0; 
    SPCRAM:     start = $0200, size = $FDC0;
}

# Logical areas code/data can be put into.
SEGMENTS {
    # Areas for variables for main CPU
    ZEROPAGE:   load = ZP,                    optional = yes, type = zp;
    STACK:      load = STACK, align = $100,   optional = yes, type = bss;
    LORAM:      load = LORAM, align = $100,   optional = yes, type = bss;
    HIRAM:      load = HIRAM, align = $100,   optional = yes, type = bss;
    EXRAM:      load = EXRAM, align = $100,   optional = yes, type = bss;

    # Read-only areas for main CPU
    BANK0:      load = ROM0,  align = $100,   optional = yes, type = ro;
    HEADER:     load = ROM0,  start = $80FFC0,optional = yes, type = ro;
    ROMINFO:    load = ROM0,  start = $80FFD5,optional = yes, type = ro;
    VECTORS:    load = ROM0,  start = $80FFE4,optional = yes, type = ro;
    BANK1:      load = ROM1,  align = $100,   optional = yes, type = ro;
    BANK2:      load = ROM2,  align = $100,   optional = yes, type = ro;
    BANK3:      load = ROM3,  align = $100,   optional = yes, type = ro;
    BANK4:      load = ROM4,  align = $100,   optional = yes, type = ro;
    BANK5:      load = ROM5,  align = $100,   optional = yes, type = ro;
    BANK6:      load = ROM6,  align = $100,   optional = yes, type = ro;
    BANK7:      load = ROM7,  align = $100,   optional = yes, type = ro;

    SPCZEROPAGE:load = SPCZP, type = zp;
    SPCIMAGE:   load = ROM1,  align = $100, run = SPCRAM, define = yes;
}
